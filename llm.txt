# LLM Usage Guidelines for Task Management System

## システム概要

このタスク管理システムは、YAMLベースのCLIツールです。LLMとして、以下の点に注意してシステムを理解し操作してください。

## 重要な設計原則

1. ファイル構造の一貫性
   - 全てのスクリプトは`lib/`以下に適切に分類して配置
   - コマンド実装は`commands/`
   - コア機能は`core/`
   - 共通ユーティリティは`utils/`
   - 設定やデータは`tasks/`

2. 環境変数の取り扱い
   - `SCRIPT_DIR`: スクリプトのルートディレクトリ
   - `TASK_DIR`: タスクデータのルートディレクトリ
   - `DEBUG`: デバッグモード制御

3. エラーハンドリングの階層
   - 入力バリデーション（validators.sh）
   - ビジネスロジック（各コマンドスクリプト）
   - データ操作（yaml_processor.sh）
   - テンプレート処理（template_engine.sh）

## コマンド解析のポイント

1. タスク操作コマンド
   ```bash
   ./task.sh <command> [options]
   ```
   - 必須オプションと任意オプションを区別
   - オプションの組み合わせルールを理解
   - 各コマンドの副作用を把握

2. オプション形式
   - ショート形式（-i, -n, -d, -c, -p）
   - ロング形式（--id, --name, --description, --concerns, --parent）
   - 特殊オプション（--prefix, --start-num）：タスクID制御用
   - 更新オプション（--repo, --branch, --force）：システム更新用
   - 値を取るオプションと真偽値オプションの区別

## データ構造の理解

1. タスクデータ（tasks.yaml）
   ```yaml
   tasks:
     - id: "TA01"
       name: "タスク名"
       description: "説明"
       concerns: "懸念事項"
       status: "not_started"
       parent: null
   ```

2. プロジェクト設定（project_config.yaml）
   ```yaml
   # タスク管理の設定
   prefix: "TA"  # デフォルトのタスクIDプレフィックス
   auto_numbering: true  # 自動採番を行うかどうか
   start_number: 1  # 自動採番の開始番号
   ```

3. テンプレート設定（template_config.yaml）
   - 表示形式の定義
   - シンボルマッピング
   - レイアウト設定

## タスクID生成のルール

1. 基本構造
   - 形式：プレフィックス + 連番（例：TA01, PA02, BUG03）
   - プレフィックス：タスク種別を表す英字（TA, PA, BUG, FEATなど）
   - 連番：全体で連続した番号（プレフィックスが異なっても連番は続く）

2. 採番ロジック
   - すべてのタスクから最大の番号を抽出
   - プレフィックスに関係なく次の番号を割り当て
   - 開始番号（start_number）が指定されている場合は考慮

3. 使用例
   ```bash
   task add -n "仕様検討" --prefix "PA"  # PA01
   task add -n "バグ修正" --prefix "BUG" # BUG02
   task add -n "機能開発" --prefix "FEAT" # FEAT03
   ```

## 更新機能の概要

1. 基本的な更新手順
   - GitHubリポジトリから最新コードを取得
   - インストールスクリプトを実行
   - バイナリとライブラリファイルを更新

2. 更新コマンドオプション
   ```bash
   task update                  # デフォルトリポジトリから更新
   task update --force          # 確認なしで更新を実行
   task update --repo <URL>     # 指定されたリポジトリから更新
   task update --branch <名前>  # 指定されたブランチから更新
   ```

3. 更新プロセス中の注意点
   - 既存の設定ファイルは保持される
   - 更新中のエラーハンドリング
   - システムコマンドへの依存関係（git, curl）

## エラー発生時の対応

1. エラーメッセージの解析
   - エラーの発生箇所の特定
   - エラーの種類の判別
   - 関連するモジュールの把握

2. デバッグ情報の活用
   ```bash
   DEBUG=1 ./task.sh <command>
   ```
   - 環境変数の値
   - ファイルパスの解決
   - 関数呼び出しの流れ

## バックアップ処理の理解

1. バックアップのタイミング
   - タスク更新前
   - 重要な操作前
   - エラー発生時のロールバック用

2. バックアップファイルの命名規則
   ```
   tasks_YYYYMMDD_HHMMSS.yaml
   ```

## 推奨される操作手順

1. タスク作成時
   - 必須項目の確認
   - 親タスクの存在確認
   - IDの重複チェック
   - プレフィックス指定の検討

2. タスク編集時
   - 既存データの取得
   - バックアップの確認
   - 更新内容の検証

3. タスク削除時
   - 依存関係のチェック
   - バックアップの作成
   - 関連データの整理

4. システム更新時
   - 事前のタスクデータバックアップ
   - リポジトリとブランチの適切な指定
   - インストール結果の確認

## エラー防止のためのチェックリスト

1. コマンド実行前
   - 必要なディレクトリの存在
   - 必須オプションの指定
   - 値の形式の確認
   - プレフィックスの適切な指定

2. データ操作時
   - YAMLファイルの構文
   - IDの一意性
   - 親子関係の整合性

3. テンプレート処理時
   - テンプレートファイルの存在
   - 変数の展開
   - 出力先の権限

4. 更新プロセス時
   - Gitの利用可能性確認
   - ネットワーク接続状態
   - 適切な権限設定

## パフォーマンス最適化のヒント

1. ファイル操作
   - 不要な読み書きの回避
   - バッファリングの活用
   - 一時ファイルの適切な管理

2. バックアップ戦略
   - 必要最小限のバックアップ
   - 古いバックアップの管理
   - ストレージ使用量の監視

## 機能拡張時の注意点

1. 新規コマンド追加
   - 既存コマンドとの整合性
   - ヘルプメッセージの更新
   - テストケースの作成

2. データ構造の変更
   - 後方互換性の維持
   - マイグレーション戦略
   - バックアップ形式の調整

3. タスクID仕様の変更
   - プレフィックスの有効性検証
   - 連番生成ロジックの整合性
   - 表示形式への影響 